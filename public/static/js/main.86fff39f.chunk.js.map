{"version":3,"sources":["generated/graphql.tsx","components/SnackBar/index.tsx","components/NavBar/index.tsx","providers/ThemeProvider.tsx","providers/LoadingProvider.tsx","components/Login/index.tsx","components/DatePicker/index.tsx","components/Register/index.tsx","components/AddPost/index.tsx","components/SkeletonCard/index.tsx","components/SinglePost/index.tsx","components/Posts/index.tsx","components/ThemePicker/index.tsx","components/Home/index.tsx","components/App/index.tsx","index.tsx"],"names":["PostResponseFragmentDoc","gql","RegularUserFragmentDoc","RegularUserResponseFragmentDoc","AddNewPostDocument","LikePostDocument","LoginDocument","LogoutDocument","RegisterDocument","GetPostsDocument","MeDocument","useMeQuery","baseOptions","Apollo","useStyles","makeStyles","theme","close","padding","spacing","Snack","open","handleClose","message","classes","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","onClose","action","Button","color","size","onClick","IconButton","aria-label","className","createStyles","root","flexGrow","menuButton","marginRight","title","NavBar","data","location","useLocation","history","useHistory","logOut","useState","setMessage","setOpen","logOutPressed","a","update","cache","evict","fieldName","AppBar","position","Toolbar","Typography","variant","pathname","component","routerLink","to","loading","me","includes","push","SnackBar","_","reason","ThemeContext","React","createContext","primaryColor","secondaryColor","setPrimaryColor","setSecondaryColor","ThemeProvider","children","Provider","value","LoadingContext","loader","showLoader","hideLoader","LoadingProvider","useRef","current","style","display","paper","marginTop","flexDirection","alignItems","avatar","margin","backgroundColor","palette","primary","main","form","width","submit","field","LoginSchema","Yup","shape","password","min","max","required","email","Login","errMsg","setErrMsg","login","useContext","Container","maxWidth","CssBaseline","Avatar","initialValues","validationSchema","onSubmit","values","setErrors","variables","user","writeQuery","query","__typename","err","console","error","resp","errors","isSubmitting","getFieldProps","TextField","type","label","id","disabled","Grid","container","item","Link","DatePickerField","other","clearable","name","format","onChange","date","setFieldValue","dateField","RegisterSchema","dob","Register","register","Date","md","xs","utils","DateFnsUtils","header","grey","input","inputField","cardContent","text","marginLeft","alignSelf","imgWrap","fontSize","opacity","borderRadius","top","right","transition","cursor","transform","AddPost","posts","setPosts","currentPage","setCurrentPage","limit","totalCount","setTotalCount","addPost","picture","setPicture","useDropzone","accept","multiple","onDrop","acceptedFiles","map","file","Object","assign","preview","URL","createObjectURL","getRootProps","getInputProps","removeImage","imgPreview","height","src","alt","Card","content","validate","length","resetForm","trim","addNewPost","log","newPost","post","newPosts","unshift","pop","submitForm","CardHeader","subheader","CardContent","FormControl","InputBase","placeholder","multiline","FormHelperText","gutterBottom","card","media","SkeletonCard","Skeleton","animation","marginBottom","Fragment","paddingTop","expand","transitions","create","duration","shortest","expandOpen","red","liked","SinglePost","postId","username","createdOn","imgUrl","numberOfLikes","isUserLiked","noOfLikes","setNoOfLikes","isLiked","setIsLiked","likePost","toggleLike","toLocaleDateString","CardMedia","image","CardActions","disableSpacing","bg","minHeight","divider","pagination","Posts","page","onCompleted","postData","getPosts","count","onError","e","fetchPolicy","loadPosts","useEffect","window","scroll","left","behavior","Divider","creator","Number","createdAt","imagePath","hasUserLiked","Pagination","showFirstButton","showLastButton","Math","ceil","exampleWrapper","bottom","icon","secondary","speedDial","themeSheet","blue","purple","green","actions","htmlColor","ThemePicker","themeVal","SpeedDial","ariaLabel","onOpen","direction","SpeedDialAction","tooltipTitle","selectedColor","toLowerCase","changeTheme","maxHeight","mainText","textAlign","subText","textContainer","btn","Home","link","createUploadLink","uri","credentials","client","ApolloClient","InMemoryCache","App","createMuiTheme","LinearProgress","ref","exact","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.86fff39f.chunk.js","sourcesContent":["import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /** The javascript `Date` as string. Type represents date and time as the ISO Date string. */\n  DateTime: any;\n  /** The `Upload` scalar type represents a file upload. */\n  Upload: any;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  me?: Maybe<User>;\n  getPosts: GetPostResponse;\n};\n\n\nexport type QueryGetPostsArgs = {\n  input: GetPostInput;\n};\n\nexport type User = {\n  __typename?: 'User';\n  id: Scalars['Int'];\n  email: Scalars['String'];\n  name: Scalars['String'];\n  dob: Scalars['DateTime'];\n  posts: Array<Post>;\n  userLikes: Array<PostLikes>;\n  createdAt: Scalars['String'];\n  updatedAt: Scalars['String'];\n};\n\n\nexport type Post = {\n  __typename?: 'Post';\n  id: Scalars['Int'];\n  content: Scalars['String'];\n  imagePath?: Maybe<Scalars['String']>;\n  numberOfLikes: Scalars['Int'];\n  hasUserLiked: Scalars['Boolean'];\n  creator: User;\n  postLikes: Array<PostLikes>;\n  createdAt: Scalars['String'];\n  updatedAt: Scalars['String'];\n};\n\nexport type PostLikes = {\n  __typename?: 'PostLikes';\n  user: User;\n  post: Post;\n};\n\nexport type GetPostResponse = {\n  __typename?: 'GetPostResponse';\n  error?: Maybe<Scalars['String']>;\n  posts?: Maybe<Array<Post>>;\n  hasNext: Scalars['Boolean'];\n  count?: Maybe<Scalars['Int']>;\n};\n\nexport type GetPostInput = {\n  page: Scalars['Int'];\n  limit: Scalars['Int'];\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  register: UserResponse;\n  login: UserResponse;\n  logout: Scalars['Boolean'];\n  addNewPost: PostResponse;\n  likePost: Scalars['Boolean'];\n};\n\n\nexport type MutationRegisterArgs = {\n  input: RegisterInput;\n};\n\n\nexport type MutationLoginArgs = {\n  input: LoginInput;\n};\n\n\nexport type MutationAddNewPostArgs = {\n  input: CreatePostInput;\n};\n\n\nexport type MutationLikePostArgs = {\n  postId: Scalars['Int'];\n};\n\nexport type UserResponse = {\n  __typename?: 'UserResponse';\n  error?: Maybe<Scalars['String']>;\n  user?: Maybe<User>;\n};\n\nexport type RegisterInput = {\n  email: Scalars['String'];\n  password: Scalars['String'];\n  name: Scalars['String'];\n  dob: Scalars['DateTime'];\n};\n\nexport type LoginInput = {\n  email: Scalars['String'];\n  password: Scalars['String'];\n};\n\nexport type PostResponse = {\n  __typename?: 'PostResponse';\n  error?: Maybe<Scalars['String']>;\n  post?: Maybe<Post>;\n};\n\nexport type CreatePostInput = {\n  content: Scalars['String'];\n  picture?: Maybe<Scalars['Upload']>;\n};\n\n\nexport type PostResponseFragment = (\n  { __typename?: 'Post' }\n  & Pick<Post, 'id' | 'content' | 'imagePath' | 'numberOfLikes' | 'hasUserLiked' | 'createdAt'>\n  & { creator: (\n    { __typename?: 'User' }\n    & Pick<User, 'name'>\n  ) }\n);\n\nexport type RegularUserFragment = (\n  { __typename?: 'User' }\n  & Pick<User, 'id' | 'name'>\n);\n\nexport type RegularUserResponseFragment = (\n  { __typename?: 'UserResponse' }\n  & Pick<UserResponse, 'error'>\n  & { user?: Maybe<(\n    { __typename?: 'User' }\n    & RegularUserFragment\n  )> }\n);\n\nexport type AddNewPostMutationVariables = Exact<{\n  picture?: Maybe<Scalars['Upload']>;\n  content: Scalars['String'];\n}>;\n\n\nexport type AddNewPostMutation = (\n  { __typename?: 'Mutation' }\n  & { addNewPost: (\n    { __typename?: 'PostResponse' }\n    & Pick<PostResponse, 'error'>\n    & { post?: Maybe<(\n      { __typename?: 'Post' }\n      & PostResponseFragment\n    )> }\n  ) }\n);\n\nexport type LikePostMutationVariables = Exact<{\n  postId: Scalars['Int'];\n}>;\n\n\nexport type LikePostMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'likePost'>\n);\n\nexport type LoginMutationVariables = Exact<{\n  email: Scalars['String'];\n  password: Scalars['String'];\n}>;\n\n\nexport type LoginMutation = (\n  { __typename?: 'Mutation' }\n  & { login: (\n    { __typename?: 'UserResponse' }\n    & RegularUserResponseFragment\n  ) }\n);\n\nexport type LogoutMutationVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type LogoutMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'logout'>\n);\n\nexport type RegisterMutationVariables = Exact<{\n  email: Scalars['String'];\n  password: Scalars['String'];\n  name: Scalars['String'];\n  dob: Scalars['DateTime'];\n}>;\n\n\nexport type RegisterMutation = (\n  { __typename?: 'Mutation' }\n  & { register: (\n    { __typename?: 'UserResponse' }\n    & RegularUserResponseFragment\n  ) }\n);\n\nexport type GetPostsQueryVariables = Exact<{\n  limit: Scalars['Int'];\n  page: Scalars['Int'];\n}>;\n\n\nexport type GetPostsQuery = (\n  { __typename?: 'Query' }\n  & { getPosts: (\n    { __typename?: 'GetPostResponse' }\n    & Pick<GetPostResponse, 'hasNext' | 'error' | 'count'>\n    & { posts?: Maybe<Array<(\n      { __typename?: 'Post' }\n      & PostResponseFragment\n    )>> }\n  ) }\n);\n\nexport type MeQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type MeQuery = (\n  { __typename?: 'Query' }\n  & { me?: Maybe<(\n    { __typename?: 'User' }\n    & RegularUserFragment\n  )> }\n);\n\nexport const PostResponseFragmentDoc = gql`\n    fragment PostResponse on Post {\n  id\n  content\n  imagePath\n  numberOfLikes\n  hasUserLiked\n  createdAt\n  creator {\n    name\n  }\n}\n    `;\nexport const RegularUserFragmentDoc = gql`\n    fragment RegularUser on User {\n  id\n  name\n}\n    `;\nexport const RegularUserResponseFragmentDoc = gql`\n    fragment RegularUserResponse on UserResponse {\n  error\n  user {\n    ...RegularUser\n  }\n}\n    ${RegularUserFragmentDoc}`;\nexport const AddNewPostDocument = gql`\n    mutation AddNewPost($picture: Upload, $content: String!) {\n  addNewPost(input: {picture: $picture, content: $content}) {\n    post {\n      ...PostResponse\n    }\n    error\n  }\n}\n    ${PostResponseFragmentDoc}`;\nexport type AddNewPostMutationFn = Apollo.MutationFunction<AddNewPostMutation, AddNewPostMutationVariables>;\n\n/**\n * __useAddNewPostMutation__\n *\n * To run a mutation, you first call `useAddNewPostMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddNewPostMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addNewPostMutation, { data, loading, error }] = useAddNewPostMutation({\n *   variables: {\n *      picture: // value for 'picture'\n *      content: // value for 'content'\n *   },\n * });\n */\nexport function useAddNewPostMutation(baseOptions?: Apollo.MutationHookOptions<AddNewPostMutation, AddNewPostMutationVariables>) {\n        return Apollo.useMutation<AddNewPostMutation, AddNewPostMutationVariables>(AddNewPostDocument, baseOptions);\n      }\nexport type AddNewPostMutationHookResult = ReturnType<typeof useAddNewPostMutation>;\nexport type AddNewPostMutationResult = Apollo.MutationResult<AddNewPostMutation>;\nexport type AddNewPostMutationOptions = Apollo.BaseMutationOptions<AddNewPostMutation, AddNewPostMutationVariables>;\nexport const LikePostDocument = gql`\n    mutation LikePost($postId: Int!) {\n  likePost(postId: $postId)\n}\n    `;\nexport type LikePostMutationFn = Apollo.MutationFunction<LikePostMutation, LikePostMutationVariables>;\n\n/**\n * __useLikePostMutation__\n *\n * To run a mutation, you first call `useLikePostMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLikePostMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [likePostMutation, { data, loading, error }] = useLikePostMutation({\n *   variables: {\n *      postId: // value for 'postId'\n *   },\n * });\n */\nexport function useLikePostMutation(baseOptions?: Apollo.MutationHookOptions<LikePostMutation, LikePostMutationVariables>) {\n        return Apollo.useMutation<LikePostMutation, LikePostMutationVariables>(LikePostDocument, baseOptions);\n      }\nexport type LikePostMutationHookResult = ReturnType<typeof useLikePostMutation>;\nexport type LikePostMutationResult = Apollo.MutationResult<LikePostMutation>;\nexport type LikePostMutationOptions = Apollo.BaseMutationOptions<LikePostMutation, LikePostMutationVariables>;\nexport const LoginDocument = gql`\n    mutation Login($email: String!, $password: String!) {\n  login(input: {email: $email, password: $password}) {\n    ...RegularUserResponse\n  }\n}\n    ${RegularUserResponseFragmentDoc}`;\nexport type LoginMutationFn = Apollo.MutationFunction<LoginMutation, LoginMutationVariables>;\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      email: // value for 'email'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions?: Apollo.MutationHookOptions<LoginMutation, LoginMutationVariables>) {\n        return Apollo.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument, baseOptions);\n      }\nexport type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;\nexport type LoginMutationResult = Apollo.MutationResult<LoginMutation>;\nexport type LoginMutationOptions = Apollo.BaseMutationOptions<LoginMutation, LoginMutationVariables>;\nexport const LogoutDocument = gql`\n    mutation logout {\n  logout\n}\n    `;\nexport type LogoutMutationFn = Apollo.MutationFunction<LogoutMutation, LogoutMutationVariables>;\n\n/**\n * __useLogoutMutation__\n *\n * To run a mutation, you first call `useLogoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLogoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [logoutMutation, { data, loading, error }] = useLogoutMutation({\n *   variables: {\n *   },\n * });\n */\nexport function useLogoutMutation(baseOptions?: Apollo.MutationHookOptions<LogoutMutation, LogoutMutationVariables>) {\n        return Apollo.useMutation<LogoutMutation, LogoutMutationVariables>(LogoutDocument, baseOptions);\n      }\nexport type LogoutMutationHookResult = ReturnType<typeof useLogoutMutation>;\nexport type LogoutMutationResult = Apollo.MutationResult<LogoutMutation>;\nexport type LogoutMutationOptions = Apollo.BaseMutationOptions<LogoutMutation, LogoutMutationVariables>;\nexport const RegisterDocument = gql`\n    mutation Register($email: String!, $password: String!, $name: String!, $dob: DateTime!) {\n  register(input: {email: $email, password: $password, name: $name, dob: $dob}) {\n    ...RegularUserResponse\n  }\n}\n    ${RegularUserResponseFragmentDoc}`;\nexport type RegisterMutationFn = Apollo.MutationFunction<RegisterMutation, RegisterMutationVariables>;\n\n/**\n * __useRegisterMutation__\n *\n * To run a mutation, you first call `useRegisterMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRegisterMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [registerMutation, { data, loading, error }] = useRegisterMutation({\n *   variables: {\n *      email: // value for 'email'\n *      password: // value for 'password'\n *      name: // value for 'name'\n *      dob: // value for 'dob'\n *   },\n * });\n */\nexport function useRegisterMutation(baseOptions?: Apollo.MutationHookOptions<RegisterMutation, RegisterMutationVariables>) {\n        return Apollo.useMutation<RegisterMutation, RegisterMutationVariables>(RegisterDocument, baseOptions);\n      }\nexport type RegisterMutationHookResult = ReturnType<typeof useRegisterMutation>;\nexport type RegisterMutationResult = Apollo.MutationResult<RegisterMutation>;\nexport type RegisterMutationOptions = Apollo.BaseMutationOptions<RegisterMutation, RegisterMutationVariables>;\nexport const GetPostsDocument = gql`\n    query GetPosts($limit: Int!, $page: Int!) {\n  getPosts(input: {limit: $limit, page: $page}) {\n    hasNext\n    posts {\n      ...PostResponse\n    }\n    error\n    count\n  }\n}\n    ${PostResponseFragmentDoc}`;\n\n/**\n * __useGetPostsQuery__\n *\n * To run a query within a React component, call `useGetPostsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetPostsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetPostsQuery({\n *   variables: {\n *      limit: // value for 'limit'\n *      page: // value for 'page'\n *   },\n * });\n */\nexport function useGetPostsQuery(baseOptions: Apollo.QueryHookOptions<GetPostsQuery, GetPostsQueryVariables>) {\n        return Apollo.useQuery<GetPostsQuery, GetPostsQueryVariables>(GetPostsDocument, baseOptions);\n      }\nexport function useGetPostsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetPostsQuery, GetPostsQueryVariables>) {\n          return Apollo.useLazyQuery<GetPostsQuery, GetPostsQueryVariables>(GetPostsDocument, baseOptions);\n        }\nexport type GetPostsQueryHookResult = ReturnType<typeof useGetPostsQuery>;\nexport type GetPostsLazyQueryHookResult = ReturnType<typeof useGetPostsLazyQuery>;\nexport type GetPostsQueryResult = Apollo.QueryResult<GetPostsQuery, GetPostsQueryVariables>;\nexport const MeDocument = gql`\n    query Me {\n  me {\n    ...RegularUser\n  }\n}\n    ${RegularUserFragmentDoc}`;\n\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useMeQuery(baseOptions?: Apollo.QueryHookOptions<MeQuery, MeQueryVariables>) {\n        return Apollo.useQuery<MeQuery, MeQueryVariables>(MeDocument, baseOptions);\n      }\nexport function useMeLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MeQuery, MeQueryVariables>) {\n          return Apollo.useLazyQuery<MeQuery, MeQueryVariables>(MeDocument, baseOptions);\n        }\nexport type MeQueryHookResult = ReturnType<typeof useMeQuery>;\nexport type MeLazyQueryHookResult = ReturnType<typeof useMeLazyQuery>;\nexport type MeQueryResult = Apollo.QueryResult<MeQuery, MeQueryVariables>;","import React from 'react';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\n\ninterface SnackProps {\n  open: boolean;\n  handleClose: (_: React.SyntheticEvent | MouseEvent, reason?: string) => void;\n  message: string;\n}\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  close: {\n    padding: theme.spacing(0.5),\n  },\n}));\n\nconst Snack: React.FC<SnackProps> = ({\n  open,\n  handleClose,\n  message,\n}) => {\n  const classes = useStyles();\n  return (\n    <Snackbar\n      key={message}\n      anchorOrigin={{\n        vertical: 'bottom',\n        horizontal: 'left',\n      }}\n      open={open}\n      autoHideDuration={6000}\n      onClose={handleClose}\n      message={message}\n      action={\n        <>\n          <Button color=\"secondary\" size=\"small\" onClick={handleClose}>\n            UNDO\n          </Button>\n          <IconButton\n            aria-label=\"close\"\n            color=\"inherit\"\n            className={classes.close}\n            onClick={handleClose}\n          >\n            <CloseIcon />\n          </IconButton>\n        </>\n      }\n    />\n  );\n};\n\nexport default Snack;\n","import React, { useState } from 'react';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport { Link as routerLink, useLocation, useHistory } from 'react-router-dom';\r\n\r\nimport { useLogoutMutation, useMeQuery } from \"../../generated/graphql\";\r\nimport SnackBar from '../SnackBar/index';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n      flexGrow: 1,\r\n    },\r\n  }),\r\n);\r\n\r\nconst NavBar = () => {\r\n  const classes = useStyles();\r\n  const data = useMeQuery();\r\n  const location = useLocation();\r\n  const history = useHistory();\r\n  const [logOut, ] = useLogoutMutation();\r\n  const [message, setMessage] = useState('');\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const handleClose = (_: React.SyntheticEvent | MouseEvent, reason?: string) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n    setOpen(false);\r\n  };\r\n\r\n  const logOutPressed = async () => {\r\n    logOut({\r\n      update: (cache, { data }) => {\r\n        cache.evict({ fieldName: 'me' });\r\n        setMessage('Successfully Logged Out');\r\n        setOpen(true);\r\n      }\r\n    }) \r\n  };\r\n  return (\r\n    <div className={classes.root}>\r\n      {\r\n        <AppBar position=\"static\">\r\n          <Toolbar>\r\n            <Typography variant=\"h6\" className={classes.title}>\r\n              Demo App\r\n            </Typography>\r\n            {\r\n              location.pathname !== '/' ? (\r\n                <Button\r\n                  component={routerLink}\r\n                  to=\"/\"\r\n                  color=\"inherit\"\r\n                >\r\n                  Home\r\n                </Button>\r\n              ) : null\r\n            }\r\n            {\r\n              data.loading ?\r\n                <></>\r\n              : data.data?.me ?\r\n                (\r\n                  !(location.pathname.includes('/login') || location.pathname.includes('/register')) ?\r\n                    <>\r\n                      {\r\n                        !location.pathname.includes('/posts') ?\r\n                          <Button\r\n                            component={routerLink}\r\n                            to=\"/posts\"\r\n                            color=\"inherit\"\r\n                          >\r\n                            Posts\r\n                          </Button>\r\n                        : null\r\n                      }\r\n                      <Button\r\n                        color=\"inherit\"\r\n                        onClick={logOutPressed}\r\n                      >\r\n                        Logout\r\n                      </Button>\r\n                    </>\r\n                  : history.push('/')\r\n                )\r\n              : (\r\n                !(location.pathname.includes('/login') || location.pathname.includes('/register')) && location.pathname === '/' ?\r\n                  <> \r\n                    <Button\r\n                      component={routerLink}\r\n                      to=\"/login\"\r\n                      color=\"inherit\"\r\n                    >\r\n                      Login\r\n                    </Button>\r\n                    <Button\r\n                      component={routerLink}\r\n                      to=\"/register\"\r\n                      color=\"inherit\"\r\n                    >\r\n                      Register\r\n                    </Button>\r\n                  </>\r\n                : location.pathname.includes('/login') || location.pathname.includes('/register') ?\r\n                  null\r\n                : history.push('/login')\r\n              )\r\n            }\r\n          </Toolbar>\r\n          <SnackBar message={message} open={open} handleClose={handleClose} />\r\n        </AppBar>\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import React, { useState } from 'react';  \n\ntype ContextType = {\n  primaryColor: string;\n  secondaryColor: string;\n  setPrimaryColor: (color: string) => void;\n  setSecondaryColor: (color: string) => void;\n};\n\nexport const ThemeContext = React.createContext<ContextType>({\n  primaryColor: '#1976d2',\n  secondaryColor: '#DC004E',\n  setPrimaryColor: () => {},\n  setSecondaryColor: () => {},\n});\n\ninterface ThemeProviderProps {};\n\nconst ThemeProvider:  React.FC<ThemeProviderProps> = ({ children }) => {\n  const [primaryColor, setPrimaryColor] = useState<string>('#1976d2');\n  const [secondaryColor, setSecondaryColor] = useState<string>('#DC004E');\n  return (\n    <ThemeContext.Provider\n      value={{\n        primaryColor,\n        secondaryColor,\n        setPrimaryColor: (color: string) => {\n          setPrimaryColor(color);\n        },\n        setSecondaryColor: (color: string) => {\n          setSecondaryColor(color);\n        }\n      }}\n    >\n      {children}\n    </ThemeContext.Provider>\n  )\n};\n\nexport default ThemeProvider;","import React, { useRef } from 'react';  \n\ntype ContextType = {\n  loader: any;\n  showLoader: () => void;\n  hideLoader: () => void;\n};\n\nexport const LoadingContext = React.createContext<ContextType>({\n  loader: null,\n  showLoader: () => {},\n  hideLoader: () => {},\n});\n\ninterface LoadingProviderProps {};\n\nconst LoadingProvider:  React.FC<LoadingProviderProps> = ({ children }) => {\n  const loader = useRef<any>();\n  return (\n    <LoadingContext.Provider\n      value={{\n        loader,\n        showLoader: () => {\n          loader.current.style.display = 'block'\n        },\n        hideLoader: () => {\n          loader.current.style.display = 'none'\n        },\n      }}\n    >\n      {children}\n    </LoadingContext.Provider>\n  )\n};\n\nexport default LoadingProvider;","import React, { useState } from 'react';\nimport { Form, Formik } from 'formik';\nimport { useHistory } from \"react-router-dom\"\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Link from '@material-ui/core/Link';\nimport { Link as routerLink } from 'react-router-dom';\nimport * as Yup from 'yup';\n\nimport {\n  MeDocument,\n  MeQuery,\n  useLoginMutation,\n} from '../../generated/graphql';\nimport Snackbar from '../SnackBar/index';\nimport { LoadingContext } from '../../providers/LoadingProvider';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.primary.main,\n  },\n  form: {\n    width: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n    width: '25%',\n  },\n  field: {\n    marginTop: 10,\n  },\n  close: {\n    padding: theme.spacing(0.5),\n  },\n}));\n\ninterface LoginProps {}\n\nconst LoginSchema = Yup.object().shape({\n  password: Yup.string()\n    .min(6, 'Too Short!')\n    .max(50, 'Too Long!')\n    .required('Required'),\n  email: Yup.string().email('Invalid email').required('Required'),\n});\n\nconst Login: React.FC<LoginProps> = () => {\n  const [open, setOpen] = useState(false);\n  const [errMsg, setErrMsg] = useState('');\n  const history = useHistory();\n  const [login, ] = useLoginMutation();\n  const classes = useStyles();\n  const { showLoader, hideLoader } = React.useContext(LoadingContext);\n  \n  const handleClose = (_: React.SyntheticEvent | MouseEvent, reason?: string) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    setOpen(false);\n  };\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <LockOutlinedIcon />\n        </Avatar>\n        <Typography component=\"h1\" variant=\"h5\">\n          Sign in\n        </Typography>\n        <Formik\n          initialValues={{email: \"\", password: \"\"}}\n          validationSchema={LoginSchema}\n          onSubmit={async (values, {setErrors}) => {\n            showLoader();\n            const resp = await login({\n              variables: {\n                ...values\n              },\n              update: (cache, { data }) => {\n                try {\n                  const user = data?.login.user;\n                  if (user) {\n                    cache.writeQuery<MeQuery>({\n                      query: MeDocument,\n                      data: {\n                        __typename: \"Query\",\n                        me: user,\n                      },\n                    });\n                  }\n                } catch (err) {\n                  console.error(err);\n                }\n              },\n            });\n            hideLoader();\n            if (resp.errors) {\n              setErrMsg('Server Erorr. Please Try Again.');\n              setOpen(true);\n            } else if (resp.data?.login.error) {\n              setErrMsg(resp?.data?.login?.error || 'Error');\n              setOpen(true);\n            } else {\n              history.push('/posts');\n            }\n          }}\n        >\n          {({ isSubmitting, getFieldProps, errors, values }) => (\n            <Form className={classes.form}>\n              <TextField\n                required\n                error={!!errors.email && values.email !== ''}\n                className={classes.field}\n                type=\"email\"\n                label=\"Email\"\n                id=\"email\"\n                {...getFieldProps('email')}\n              />\n              <TextField\n                required\n                error={!!errors.password && values.password !== ''}\n                className={classes.field}\n                type=\"password\"\n                label=\"Password\"\n                id=\"password\"\n                {...getFieldProps('password')}\n              />\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                disabled={isSubmitting}\n                className={classes.submit}\n                type=\"submit\"\n              >\n                Login\n              </Button>\n              <Grid container>\n                <Grid item>\n                  <Link to=\"/register\" component={routerLink} variant=\"body2\">\n                    Do not have an account? Sign Up\n                  </Link>\n                </Grid>\n              </Grid>\n            </Form>\n          )}\n        </Formik>\n        <Snackbar message={errMsg} open={open} handleClose={handleClose} />\n      </div>\n    </Container>\n  );\n};\n\nexport default Login;\n","import React from 'react';\nimport { KeyboardDatePicker } from \"@material-ui/pickers\";\n\nconst DatePickerField: React.FC<any> = ({ field, form, ...other }) => {\n  return (\n    <KeyboardDatePicker\n      clearable={true}\n      name={field.name}\n      value={field.value}\n      format=\"dd/MM/yyyy\"\n      onChange={date => form.setFieldValue(field.name, date, false)}\n      {...other}\n    />\n  );\n};\n\nexport default DatePickerField;","import React, { useState } from 'react';\nimport { Form, Formik, Field } from 'formik';\nimport { useHistory } from \"react-router-dom\"\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Link from '@material-ui/core/Link';\nimport { Link as routerLink } from 'react-router-dom';\nimport { MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport DateFnsUtils from '@date-io/date-fns';\nimport * as Yup from 'yup';\n\nimport {\n  MeDocument,\n  MeQuery,\n  useRegisterMutation,\n} from '../../generated/graphql';\nimport DatePickerField from '../DatePicker/index';\nimport Snackbar from '../SnackBar/index';\nimport { LoadingContext } from '../../providers/LoadingProvider';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.primary.main,\n  },\n  form: {\n    width: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n    width: '25%',\n  },\n  field: {\n    marginTop: 10,\n    width: '100%',\n  },\n  dateField: {\n    width: '100%',\n    marginTop: 25,\n  }\n}));\n\ninterface RegisterProps {}\n\nconst RegisterSchema = Yup.object().shape({\n  name: Yup.string()\n    .max(50, 'Too Long!')\n    .required('Required'),\n  password: Yup.string()\n    .min(6, 'Too Short!')\n    .max(50, 'Too Long!')\n    .required('Required'),\n  email: Yup.string().email('Invalid email').required('Required'),\n  dob: Yup.date().required('Required'),\n});\n\n\nconst Register: React.FC<RegisterProps> = () => {\n  const history = useHistory();\n  const [register, ] = useRegisterMutation();\n  const classes = useStyles();\n  const [open, setOpen] = useState(false);\n  const [errMsg, setErrMsg] = useState('');\n  const { showLoader, hideLoader } = React.useContext(LoadingContext);\n  const handleClose = (_: React.SyntheticEvent | MouseEvent, reason?: string) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    setOpen(false);\n  };\n  \n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <LockOutlinedIcon />\n        </Avatar>\n        <Typography component=\"h1\" variant=\"h5\">\n          Sign in\n        </Typography>\n        <Formik\n          initialValues={{\n            email: \"\",\n            password: \"\",\n            dob: new Date(),\n            name: \"\"\n          }}\n          validationSchema={RegisterSchema}\n          onSubmit={async (values, {setErrors}) => {\n            showLoader();\n            const resp = await register({\n              variables: {\n                ...values\n              },\n              update: (cache, { data }) => {\n                try {\n                  const user = data?.register.user;\n                  if (user) {\n                    cache.writeQuery<MeQuery>({\n                      query: MeDocument,\n                      data: {\n                        __typename: \"Query\",\n                        me: user,\n                      },\n                    });\n                  }\n                } catch (err) {\n                  console.error(err);\n                }\n              },\n            });\n            hideLoader();\n            if (resp.errors) {\n              setErrMsg('Server Erorr. Please Try Again.');\n              setOpen(true);\n            } else if (resp.data?.register.error) {\n              setErrMsg(resp.data.register.error);\n              setOpen(true);\n            } else {\n              history.push('/posts');\n            }\n          }}\n        >\n          {({ isSubmitting, getFieldProps, values, errors }) => (\n            <Form className={classes.form}>\n              <TextField\n                required\n                error={!!errors.name && values.name !== ''}\n                className={classes.field}\n                type=\"name\"\n                label=\"Name\"\n                id=\"name\"\n                {...getFieldProps('name')}\n              />\n              <TextField\n                required\n                error={!!errors.email && values.email !== ''}\n                className={classes.field}\n                type=\"email\"\n                label=\"Email\"\n                id=\"email\"\n                {...getFieldProps('email')}\n              />\n              <Grid container spacing={3}>\n                <Grid item md={6} xs={12}>\n                  <TextField\n                    required\n                    error={!!errors.password && values.password !== ''}\n                    className={classes.field}\n                    type=\"password\"\n                    label=\"Password\"\n                    id=\"password\"\n                    {...getFieldProps('password')}\n                  />\n                </Grid>\n                <Grid item md={6} xs={12}>\n                  <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                    <Field\n                      error={!!errors.dob}\n                      name=\"dob\"\n                      className={classes.dateField}\n                      component={DatePickerField}\n                    />\n                  </MuiPickersUtilsProvider>\n                </Grid>\n              </Grid>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                type=\"submit\"\n                disabled={isSubmitting}\n                className={classes.submit}\n              >\n                Sign Up\n              </Button>\n              <Grid container>\n                <Grid item>\n                  <Link to=\"/login\" component={routerLink} variant=\"body2\">\n                    Have an account? Login\n                  </Link>\n                </Grid>\n              </Grid>\n            </Form>\n          )}\n        </Formik>\n        <Snackbar message={errMsg} open={open} handleClose={handleClose} />\n      </div>\n    </Container>\n  );\n};\n\nexport default Register;\n","import React, { useState } from 'react';\nimport Card from '@material-ui/core/Card';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardContent from '@material-ui/core/CardContent';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport PhotoCamera from '@material-ui/icons/PhotoCamera';\nimport Typography from '@material-ui/core/Typography';\nimport InputBase from '@material-ui/core/InputBase';\nimport { Formik, Form } from 'formik';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport { useDropzone } from 'react-dropzone';\nimport CloseIcon from '@material-ui/icons/Close';\n\nimport { useMeQuery, useAddNewPostMutation, Post } from '../../generated/graphql';\nimport { LoadingContext } from '../../providers/LoadingProvider';\nimport Snackbar from '../SnackBar';\n\ninterface AddPostProps {\n  posts: Post[];\n  setPosts: React.Dispatch<React.SetStateAction<Post[]>>;\n  currentPage: number;\n  setCurrentPage: React.Dispatch<React.SetStateAction<number>>;\n  limit: number;\n  totalCount: number;\n  setTotalCount: React.Dispatch<React.SetStateAction<number>>;\n};\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      maxWidth: 600,\n      margin: 'auto',\n      marginTop: 50,\n    },\n    header: {\n      backgroundColor: theme.palette.grey[100],\n    },\n    input: {\n      display: 'none',\n    },\n    inputField: {\n      width: '90%',\n    },\n    cardContent: {\n      marginTop: 15,\n      display: 'flex',\n    },\n    text: {\n      marginLeft: 15,\n      color: theme.palette.grey[400],\n      alignSelf: 'flex-end',\n    },\n    imgWrap: {\n      display: 'inline-block',\n      position: 'relative',\n    },\n    close: {\n      fontSize: 14,\n      color: 'white',\n      backgroundColor: theme.palette.grey[800],\n      opacity: 0.8,\n      borderRadius: '50%',\n      position: 'absolute',\n      top: -7,\n      right: -7,\n      transition: '* 0.2 linear',\n      \"&:hover\": {\n        cursor: 'pointer',\n        backgroundColor: theme.palette.grey[900],\n        transform: 'scale(1.1, 1.1)'\n      }\n    },\n  }),\n);\n\nconst AddPost: React.FC<AddPostProps> = ({\n  posts,\n  setPosts,\n  currentPage,\n  setCurrentPage,\n  limit,\n  totalCount,\n  setTotalCount,\n}) => {\n  const [open, setOpen] = useState(false);\n  const [errMsg, setErrMsg] = useState('');\n  const data = useMeQuery();\n  const { showLoader, hideLoader } = React.useContext(LoadingContext);\n  const classes = useStyles();\n  const [addPost, ] = useAddNewPostMutation();\n  const [picture, setPicture] = useState<any>([]);\n  const { getRootProps, getInputProps } = useDropzone({\n    accept: 'image/jpeg, image/png',\n    multiple: false,\n    onDrop: acceptedFiles => {\n      setPicture(acceptedFiles.map(file => Object.assign(file, {\n        preview: URL.createObjectURL(file)\n      })));\n    }\n  });\n\n  const handleClose = (_: React.SyntheticEvent | MouseEvent, reason?: string) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    setOpen(false);\n  };\n\n  const removeImage = () => {\n    setPicture([]);\n  };\n\n  const imgPreview = picture.map((file: any) => (\n    <div className={classes.imgWrap} key={file.name}>\n      <img width={250} height={140} src={file.preview} alt=\"uploadedImg\" />\n      <CloseIcon onClick={removeImage} className={classes.close} />\n    </div>\n  ));\n\n  return (\n    <>\n      {\n        !data.loading ?\n          <Card className={classes.root}>\n            <Formik\n              initialValues={{\n                content: '',\n              }}\n              validate={(value) => {\n                let err: {\n                  content: undefined | string,\n                } | undefined;\n                if (value.content.length > 120) {\n                  err = {\n                    content: 'Too Long',\n                  };\n                }\n                return err;\n              }}\n              onSubmit={async (values, { resetForm, setErrors }) => {\n                showLoader();\n                if (values.content.trim().length === 0) {\n                  setErrors({\n                    content: \"Can't be empty\"\n                  });\n                  hideLoader();\n                } else {\n                  try {\n                    const resp = await addPost({\n                      variables: {\n                        ...values,\n                        picture: picture[0],\n                      },\n                      update: (cache, data) => {\n                        if (data.data?.addNewPost.error === 'Please Login to Continue') {\n                          cache.evict({ fieldName: 'me' });\n                        }\n                      },\n                    });\n                    console.log(resp);\n                    hideLoader();\n                    if (resp.errors) {\n                      setErrMsg('Server Erorr. Please Try Again.');\n                      setOpen(true);\n                    } else if (resp.data?.addNewPost.error) {\n                      if (resp.data?.addNewPost.error !== 'Please Login to Continue') {\n                        setErrMsg(resp?.data?.addNewPost?.error || 'Error');\n                        setOpen(true);\n                      }\n                    } else {\n                      setPicture([]);\n                      const newPost = resp.data?.addNewPost.post as Post;\n                      if (currentPage !== 0) {\n                        setCurrentPage(0);\n                      } else {\n                        const newPosts = [...posts];\n                        newPosts.unshift(newPost);\n                        if (posts.length >= limit) {\n                          newPosts.pop();\n                        }\n                        setPosts(newPosts);\n                      }\n                      setTotalCount(totalCount + 1);\n                      resetForm();\n                    }\n                  } catch(err) {\n                    console.log(err.message);\n                    setErrMsg('Server Erorr. Please Try Again.');\n                    setOpen(true);\n                    hideLoader();\n                  }\n                }\n              }}\n            >\n              {({ getFieldProps, values, errors, submitForm, setFieldValue }) => (\n                <Form>\n                  <CardHeader\n                    className={classes.header}\n                    avatar={\n                      <Avatar aria-label=\"profile-image\" src={`https://robohash.org/${data.data!.me!.name}.png?set=set2`} />\n                    }\n                    action={\n                      <>\n                        <span {...getRootProps({className: 'dropzone'})}>\n                          <input {...getInputProps()} />\n                          <IconButton color=\"primary\" aria-label=\"upload picture\" component=\"span\">\n                            <PhotoCamera />\n                          </IconButton>\n                        </span>\n                        <Button\n                          color=\"primary\"\n                          disabled={errors.content ? errors.content?.length > 0 : false}\n                          onClick={() => {\n                            submitForm();\n                          }}\n                        >\n                          Post\n                        </Button>\n                      </>\n                    }\n                    title={data.data!.me!.name}\n                    subheader=\"What's on your mind today?\"\n                  />\n                  <CardContent>\n                    {imgPreview}\n                    <div className={classes.cardContent}>\n                      <FormControl\n                        className={classes.inputField}\n                        error\n                      >\n                        <InputBase\n                          id=\"standard-textarea\"\n                          placeholder=\"Say something to the world.\"\n                          multiline\n                          {...getFieldProps('content')}\n                        />\n                        <FormHelperText id=\"component-error-text\">{errors.content}</FormHelperText>\n                      </FormControl>\n                      <Typography className={classes.text} variant=\"caption\" display=\"block\" gutterBottom>\n                        {values.content.length}/120\n                      </Typography>\n                    </div>\n                  </CardContent>\n                </Form>\n              )}\n            </Formik>\n            <Snackbar message={errMsg} open={open} handleClose={handleClose} />\n          </Card>\n        : null\n      }\n    </>\n  );\n};\n\nexport default AddPost;\n","import React from 'react';\nimport { createStyles, Theme, makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardContent from '@material-ui/core/CardContent';\nimport Skeleton from '@material-ui/lab/Skeleton';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    card: {\n      maxWidth: 600,\n      margin: theme.spacing(2),\n    },\n    media: {\n      height: 190,\n    },\n  }),\n);\n\n\ninterface SkeletonCardProps {}\n\nconst SkeletonCard: React.FC<SkeletonCardProps> = () => {\n  const classes = useStyles();\n  return (\n    <Card className={classes.card}>\n      <CardHeader\n        avatar={\n          <Skeleton animation=\"wave\" variant=\"circle\" width={40} height={40} />\n        }\n        title={\n          <Skeleton animation=\"wave\" height={10} width=\"80%\" style={{ marginBottom: 6 }} />\n        }\n        subheader={<Skeleton animation=\"wave\" height={10} width=\"40%\" />}\n      />\n      <Skeleton animation=\"wave\" variant=\"rect\" className={classes.media} />\n      <CardContent>\n        <React.Fragment>\n          <Skeleton animation=\"wave\" height={10} style={{ marginBottom: 6 }} />\n          <Skeleton animation=\"wave\" height={10} width=\"80%\" />\n        </React.Fragment>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default SkeletonCard;\n","import React, { useState } from 'react';\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { red } from '@material-ui/core/colors';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\n\r\nimport { useLikePostMutation } from '../../generated/graphql';\r\n\r\ninterface SinglePostProps {\r\n  postId: number;\r\n  content: string;\r\n  username: string;\r\n  createdOn: Date;\r\n  imgUrl: string | null | undefined;\r\n  numberOfLikes: number;\r\n  isUserLiked: boolean;\r\n};\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      maxWidth: 600,\r\n      margin: 'auto',\r\n      marginTop: theme.spacing(2),\r\n    },\r\n    media: {\r\n      height: 0,\r\n      paddingTop: '56.25%',\r\n    },\r\n    expand: {\r\n      transform: 'rotate(0deg)',\r\n      marginLeft: 'auto',\r\n      transition: theme.transitions.create('transform', {\r\n        duration: theme.transitions.duration.shortest,\r\n      }),\r\n    },\r\n    expandOpen: {\r\n      transform: 'rotate(180deg)',\r\n    },\r\n    avatar: {\r\n      backgroundColor: red[500],\r\n    },\r\n    text: {\r\n      margin: 'auto 0',\r\n      color: theme.palette.grey[700],\r\n    },\r\n    liked: {\r\n      color: '#FE2733'\r\n    }\r\n  }),\r\n);\r\n\r\n\r\nconst SinglePost: React.FC<SinglePostProps> = ({\r\n  postId,\r\n  content,\r\n  username,\r\n  createdOn,\r\n  imgUrl,\r\n  numberOfLikes,\r\n  isUserLiked,\r\n}) => {\r\n  const classes = useStyles();\r\n  const [noOfLikes, setNoOfLikes] = useState(numberOfLikes);\r\n  const [isLiked, setIsLiked] = useState(isUserLiked);\r\n  const [likePost, ] = useLikePostMutation();\r\n  const toggleLike = async () => {\r\n    if (isLiked) {\r\n      setNoOfLikes(noOfLikes - 1);\r\n    } else {\r\n      setNoOfLikes(noOfLikes + 1);\r\n    }\r\n    setIsLiked(!isLiked);\r\n    await likePost({\r\n      variables: {\r\n        postId,\r\n      },\r\n    });\r\n  };\r\n  return (\r\n    <Card className={classes.root}>\r\n      <CardHeader\r\n        avatar={\r\n          <Avatar aria-label=\"profile-image\" src={`https://robohash.org/${username}.png?set=set2`} />\r\n        }\r\n        title={username}\r\n        subheader={createdOn.toLocaleDateString('in')}\r\n      />\r\n      <CardContent>\r\n        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n          {content}\r\n        </Typography>\r\n      </CardContent>\r\n      {\r\n        !!imgUrl ?\r\n          <CardMedia\r\n            className={classes.media}\r\n            image={imgUrl}\r\n            title=\"Post Image\"\r\n          />\r\n        : null\r\n      }\r\n      <CardActions disableSpacing>\r\n        <IconButton onClick={toggleLike} aria-label=\"add to favorites\">\r\n          <FavoriteIcon className={isLiked ? classes.liked : ''} />\r\n        </IconButton>\r\n        <Typography className={classes.text} variant=\"caption\" display=\"block\" gutterBottom>\r\n          {noOfLikes} Likes\r\n        </Typography>\r\n      </CardActions>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default SinglePost;\r\n","import React, { useEffect, useState } from 'react';\nimport Container from '@material-ui/core/Container';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Divider from '@material-ui/core/Divider';\nimport Pagination from '@material-ui/lab/Pagination';\n\nimport AddPost from '../AddPost';\nimport { Post, useGetPostsLazyQuery } from '../../generated/graphql';\nimport SkeletonCard from '../SkeletonCard';\nimport SinglePost from '../SinglePost';\n\ninterface PostsProps {};\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    bg: {\n      minHeight: '100vh',\n      marginBottom: 20,\n    },\n    divider: {\n      marginTop: 20,\n    },\n    pagination: {\n      margin: '50px auto',\n      width: '85%',\n    }\n  }),\n);\n\nconst Posts: React.FC<PostsProps> = () => {\n  const classes = useStyles();\n  const limit = 5;\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [currentPage, setCurrentPage] = useState(0);\n  const [totalCount, setTotalCount] = useState(0);\n\n  const [loadPosts, { loading }] = useGetPostsLazyQuery({\n    variables: {\n      limit,\n      page: 0,\n    },\n    onCompleted: (postData) => {\n      if (postData.getPosts.posts) {\n        setPosts(postData.getPosts.posts as Post[]);\n        const count = postData.getPosts.count as number;\n        setTotalCount(count);\n      }\n    },\n    onError: (e) => {\n      console.log(e.message);\n    },\n    fetchPolicy: 'network-only',\n  });\n  \n  const fetchData = (page: number) => {\n    loadPosts({\n      variables: {\n        limit,\n        page,\n      }\n    });\n  }\n\n  const handleChange = (_: any, value: number) => {\n    setCurrentPage(value - 1);\n  };\n  \n  useEffect(() => {\n    window.scroll({top: 0, left: 0, behavior: 'smooth' });\n    fetchData(currentPage);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentPage]);\n\n  return (\n    <Container className={classes.bg} maxWidth=\"sm\">\n      <AddPost\n        posts={posts}\n        setPosts={setPosts}\n        currentPage={currentPage}\n        setCurrentPage={setCurrentPage}\n        limit={limit}\n        totalCount={totalCount}\n        setTotalCount={setTotalCount}\n      />\n      <Divider className={classes.divider} variant=\"middle\" />\n      {\n        loading ? \n          <SkeletonCard />\n        : (\n          <>\n            { posts.map((post) => {\n              return <SinglePost\n                key={post.id}\n                postId={post.id}\n                username={post.creator.name}\n                content={post.content}\n                createdOn={new Date(Number(post.createdAt))}\n                imgUrl={post.imagePath}\n                isUserLiked={post.hasUserLiked}\n                numberOfLikes={post.numberOfLikes}\n              />\n            })}\n            <Pagination\n              showFirstButton\n              showLastButton\n              className={classes.pagination}\n              count={Math.ceil(totalCount / limit)}\n              page={currentPage + 1}\n              onChange={handleChange}\n              color=\"primary\"\n            />\n          </>\n        )\n      }\n    </Container>\n  );\n};\n\nexport default Posts;\n","import React from 'react';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport SpeedDial from '@material-ui/lab/SpeedDial';\nimport SpeedDialAction from '@material-ui/lab/SpeedDialAction';\nimport ColorLensIcon from '@material-ui/icons/ColorLens';\nimport FormatColorFillIcon from '@material-ui/icons/FormatColorFill';\n\nimport { ThemeContext } from '../../providers/ThemeProvider';\n\ninterface ThemePickerProps {}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    exampleWrapper: {\n      height: 380,\n      margin: theme.spacing(2),\n      position: 'fixed',\n      bottom: 15,\n      right: 23,\n    },\n    icon: {\n      backgroundColor: theme.palette.secondary.main,\n    },\n    speedDial: {\n      position: 'absolute',\n      '&.MuiSpeedDial-directionUp, &.MuiSpeedDial-directionLeft': {\n        bottom: theme.spacing(2),\n        right: theme.spacing(2),\n      },\n      '&.MuiSpeedDial-directionDown, &.MuiSpeedDial-directionRight': {\n        top: theme.spacing(2),\n        left: theme.spacing(2),\n      },\n    },\n  }),\n);\n\nconst themeSheet: {\n  [key: string]: {\n    primaryColor: string;\n    secondaryColor: string;\n  }\n} = {\n  blue: {\n    primaryColor: '#1976d2',\n    secondaryColor: '#DC004E',\n  },\n  purple: {\n    primaryColor: '#8e24aa',\n    secondaryColor: '#3d5afe',\n  },\n  green: {\n    primaryColor: '#43a047',\n    secondaryColor: '#651fff',\n  },\n  red: {\n    primaryColor: '#e53935',\n    secondaryColor: '#3d5afe',\n  },\n}\n\nconst actions = [\n  { icon: <FormatColorFillIcon htmlColor=\"#1976D2\" />, name: 'Blue' },\n  { icon: <FormatColorFillIcon htmlColor=\"#8e24aa\" />, name: 'Purple' },\n  { icon: <FormatColorFillIcon htmlColor=\"#43a047\" />, name: 'Green' },\n  { icon: <FormatColorFillIcon htmlColor=\"#e53935\" />, name: 'Red' },\n];\n\nconst ThemePicker: React.FC<ThemePickerProps> = () => {\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(false);\n  const themeVal = React.useContext(ThemeContext);\n  \n  const handleClose = () => {\n    setOpen(false);\n  };\n  \n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const changeTheme = (color: string) => {\n    const selectedColor = themeSheet[color.toLowerCase()];\n    themeVal.setPrimaryColor(selectedColor.primaryColor);\n    themeVal.setSecondaryColor(selectedColor.secondaryColor);\n    handleClose();\n  }\n\n  return (\n    <div className={classes.exampleWrapper}>\n      <SpeedDial\n        ariaLabel=\"SpeedDial example\"\n        className={classes.speedDial}\n        icon={<ColorLensIcon />}\n        onClose={handleClose}\n        onOpen={handleOpen}\n        open={open}\n        color=\"red\"\n        direction=\"up\"\n      >\n        {actions.map((action) => (\n          <SpeedDialAction\n            key={action.name}\n            icon={action.icon}\n            tooltipTitle={action.name}\n            onClick={() => changeTheme(action.name)}\n          />\n        ))}\n      </SpeedDial>\n    </div>\n  );\n};\n\nexport default ThemePicker;\n","import React from 'react';\nimport Container from '@material-ui/core/Container';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport { Link as routerLink } from 'react-router-dom';\n\nimport { useMeQuery } from '../../generated/graphql';\n\ninterface HomeProps {}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    bg: {\n      maxHeight: '100vh',\n    },\n    mainText: {\n      textAlign: 'center',\n    },\n    subText: {\n      textAlign: 'center',\n    },\n    textContainer: {\n      marginTop: '20vh',\n      display: 'flex',\n      flexDirection: 'column',\n    },\n    btn: {\n      margin: '0 auto',\n    },\n  }),\n);\n\nconst Home: React.FC<HomeProps> = () => {\n  const classes = useStyles();\n  const data = useMeQuery();\n  return (\n    <Container className={classes.bg} maxWidth=\"sm\">\n      <div className={classes.textContainer}>\n        <Typography className={classes.mainText} variant=\"h3\" gutterBottom>\n          Welcome to\n        </Typography>\n        <Typography className={classes.subText} variant=\"h2\" gutterBottom>\n          Demo App\n        </Typography>\n        {\n          data.loading ?\n          null\n          : (\n            <Button\n              className={classes.btn}\n              component={routerLink}\n              to={data.data?.me ? \"/posts\" : \"/login\"}\n              color=\"secondary\"\n              variant=\"contained\"\n            >\n              Get Started\n            </Button>\n          )\n        }\n      </div>\n    </Container>\n  );\n};\n\nexport default Home;\n","import * as React from 'react';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport { ApolloClient, InMemoryCache, ApolloProvider } from '@apollo/client';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport { createUploadLink } from 'apollo-upload-client';\n\nimport NavBar from '../NavBar';\nimport { ThemeContext } from '../../providers/ThemeProvider';\nimport { LoadingContext } from '../../providers/LoadingProvider';\nimport Login from '../Login';\nimport Register from '../Register';\nimport Posts from '../Posts';\nimport ThemePicker from '../ThemePicker';\nimport Home from '../Home';\n\nconst link = createUploadLink({\n  uri: '/graphql',\n  credentials: \"include\",\n});\n\nconst client = new ApolloClient({\n  link,\n  cache: new InMemoryCache(),\n});\n\nexport const App = () => {\n  const themeVal = React.useContext(ThemeContext);\n  const { loader } = React.useContext(LoadingContext);\n  const theme = React.useMemo(\n    () =>\n      createMuiTheme({\n        palette: {\n          primary: {\n            main: themeVal.primaryColor,\n          },\n          secondary: {\n            main: themeVal.secondaryColor,\n          },\n        }\n      }),\n    [themeVal],\n  );\n  return (\n    <ApolloProvider client={client}>\n      <ThemeProvider theme={theme}>\n        <NavBar />\n        <LinearProgress style={{display: 'none'}} ref={loader} />\n        <Switch>\n          <Route\n            exact\n            path=\"/\"\n            component={(): JSX.Element => <Home />}\n          />\n          <Route\n            exact\n            path=\"/login\"\n            component={(): JSX.Element => <Login />}\n          />\n          <Route\n            exact\n            path=\"/register\"\n            component={(): JSX.Element => <Register />}\n          />\n          <Route\n            exact\n            path=\"/posts\"\n            component={(): JSX.Element => <Posts />}\n          />\n          <Redirect to=\"/\" />\n        </Switch>\n        <ThemePicker />\n      </ThemeProvider>\n    </ApolloProvider>\n  )\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nimport { App } from './components/App/index';\nimport ThemeProvider from './providers/ThemeProvider';\nimport LoadingProvider from './providers/LoadingProvider';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <ThemeProvider>\n        <LoadingProvider>\n          <App />\n        </LoadingProvider>\n      </ThemeProvider>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}